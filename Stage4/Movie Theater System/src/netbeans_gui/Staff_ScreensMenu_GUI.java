package netbeans_gui;
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

 import javax.swing.*;
 import java.awt.BorderLayout;
 import java.awt.Font;
 import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.awt.GridLayout;


/**
 *
 * @author Lithi
 */
public class Staff_ScreensMenu_GUI extends javax.swing.JFrame {

    /**
     * Creates new form Staff_ScreensMenu_GUI
     */
    public Staff_ScreensMenu_GUI() {
        initComponents();
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setupViewScreensPanel();
        setupAddScreenPanel();
        setupEditScreenPanel();
        setupDeleteScreenPanel();
    }

    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 265, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("View All Screens", jPanel1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 265, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Add Screen", jPanel2);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 265, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Edit Screen", jPanel3);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 265, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Delete Screen", jPanel4);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents



    private void setupViewScreensPanel() {
        JTextArea screenArea = new JTextArea();
        screenArea.setEditable(false);
        screenArea.setFont(new java.awt.Font("Monospaced", Font.PLAIN, 12));
        JScrollPane scrollPane = new JScrollPane(screenArea);

        jPanel1.setLayout(new BorderLayout());
        jPanel1.add(scrollPane, BorderLayout.CENTER);

        try (BufferedReader reader = new BufferedReader(new FileReader("data/showtimes.txt"))) {
            String line;
            StringBuilder content = new StringBuilder();
            content.append(String.format("%-10s %-10s %-25s %s%n", "MovieID", "Screen", "Time", "Available Seats"));
            content.append("--------------------------------------------------------------\n");
            while ((line = reader.readLine()) != null) {
                String[] parts = line.split(";");
                if (parts.length >= 3) {
                    String movieID = parts[0];
                    String screen = parts[1];
                    String time = parts[2];
                    String seats = (parts.length == 4) ? parts[3] : "(none)";
                    content.append(String.format("%-10s %-10s %-25s %s%n", movieID, screen, time, seats));
                }
            }
            screenArea.setText(content.toString());
        } catch (IOException e) {
            screenArea.setText("Failed to load showtimes.");
            e.printStackTrace();
        }
    }

    private void setupAddScreenPanel() {
        jPanel2.setLayout(new GridLayout(5, 2));
    
        JTextField movieIDField = new JTextField();
        JTextField screenField = new JTextField();
        JTextField timeField = new JTextField();
        JTextField seatCountField = new JTextField();  // New: number of seats
        JButton addButton = new JButton("Add Screen");
    
        addButton.addActionListener(e -> {
            String movieID = movieIDField.getText().trim();
            String screen = screenField.getText().trim();
            String time = timeField.getText().trim();
            int seatCount;
    
            try {
                seatCount = Integer.parseInt(seatCountField.getText().trim());
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(this, "Please enter a valid seat count.");
                return;
            }
    
            // Generate seat IDs
            List<String> seats = new ArrayList<>();
            for (int i = 0; i < seatCount; i++) {
                char row = (char) ('A' + (i / 10));
                int col = i % 10;
                seats.add(row + String.valueOf(col));
            }
    
            String seatString = String.join(" ", seats);
            String showtimeEntry = movieID + ";" + screen + ";" + time + ";" + seatString;
    
            try (BufferedWriter writer = new BufferedWriter(new FileWriter("data/showtimes.txt", true))) {
                writer.write(showtimeEntry);
                writer.newLine();
                JOptionPane.showMessageDialog(this, "Screen added with " + seatCount + " seats.");
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        });
    
        jPanel2.add(new JLabel("Movie ID:"));
        jPanel2.add(movieIDField);
        jPanel2.add(new JLabel("Screen #:"));
        jPanel2.add(screenField);
        jPanel2.add(new JLabel("Time:"));
        jPanel2.add(timeField);
        jPanel2.add(new JLabel("Number of Seats:"));
        jPanel2.add(seatCountField);
        jPanel2.add(new JLabel());
        jPanel2.add(addButton);
    }
    

    private void setupEditScreenPanel() {
        jPanel3.setLayout(new GridLayout(6, 2));
        JTextField oldMovieID = new JTextField();
        JTextField oldScreen = new JTextField();
        JTextField newTime = new JTextField();
        JTextField newSeats = new JTextField();
        JButton editButton = new JButton("Edit Screen");

        editButton.addActionListener(e -> {
            List<String> updatedLines = new ArrayList<>();
            try (BufferedReader reader = new BufferedReader(new FileReader("data/showtimes.txt"))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    String[] parts = line.split(";");
                    if (parts.length >= 3 && parts[0].equals(oldMovieID.getText()) && parts[1].equals(oldScreen.getText())) {
                        updatedLines.add(parts[0] + ";" + parts[1] + ";" + newTime.getText() + ";" + newSeats.getText());
                    } else {
                        updatedLines.add(line);
                    }
                }
            } catch (IOException ex) {
                ex.printStackTrace();
            }

            try (BufferedWriter writer = new BufferedWriter(new FileWriter("data/showtimes.txt"))) {
                for (String updatedLine : updatedLines) {
                    writer.write(updatedLine);
                    writer.newLine();
                }
                JOptionPane.showMessageDialog(this, "Screen edited.");
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        });

        jPanel3.add(new JLabel("Movie ID to Edit:"));
        jPanel3.add(oldMovieID);
        jPanel3.add(new JLabel("Screen #:"));
        jPanel3.add(oldScreen);
        jPanel3.add(new JLabel("New Time:"));
        jPanel3.add(newTime);
        jPanel3.add(new JLabel("New Seats:"));
        jPanel3.add(newSeats);
        jPanel3.add(new JLabel());
        jPanel3.add(editButton);
    }

    private void setupDeleteScreenPanel() {
        jPanel4.setLayout(new GridLayout(3, 2));
        JTextField movieIDField = new JTextField();
        JTextField screenField = new JTextField();
        JButton deleteButton = new JButton("Delete Screen");
    
        deleteButton.addActionListener(e -> {
            List<String> lines = new ArrayList<>();
            try (BufferedReader reader = new BufferedReader(new FileReader("data/showtimes.txt"))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    String[] parts = line.split(";");
                    if (!(parts[0].equals(movieIDField.getText()) && parts[1].equals(screenField.getText()))) {
                        lines.add(line);
                    }
                }
            } catch (IOException ex) {
                ex.printStackTrace();
            }
    
            try (BufferedWriter writer = new BufferedWriter(new FileWriter("data/showtimes.txt"))) {
                for (String l : lines) {
                    writer.write(l);
                    writer.newLine();
                }
                JOptionPane.showMessageDialog(this, "Screen deleted.");
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        });
    
        jPanel4.add(new JLabel("Movie ID to Delete:"));
        jPanel4.add(movieIDField);
        jPanel4.add(new JLabel("Screen #:"));
        jPanel4.add(screenField);
        jPanel4.add(new JLabel());
        jPanel4.add(deleteButton);
    }
    




    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables
}
