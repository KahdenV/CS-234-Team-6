package netbeans_gui;
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

 import javax.swing.*;
 import java.awt.BorderLayout; 
 import java.io.*;
 import java.util.ArrayList;
 import java.util.List;

/**
 *
 * @author Lithi
 */
public class Staff_PaymentMenu_GUI extends javax.swing.JFrame {

    private DefaultListModel<String> purchaseModel = new DefaultListModel<>();
    private JList<String> purchaseList = new JList<>(purchaseModel);
    private JLabel totalLabel = new JLabel("Total: $0.00");

    
    /**
     * Creates new form Staff_PaymentMenu_GUI
     */
    public Staff_PaymentMenu_GUI() {
        initComponents();
        buildPaymentUI(); // Set up the interface
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buildPaymentUI() {
        setTitle("Payment Report & Refunds");
        setLayout(new BorderLayout());

        loadPurchases();

        JScrollPane scrollPane = new JScrollPane(purchaseList);
        JButton deleteButton = new JButton("Delete Selected (Refund)");
        deleteButton.addActionListener(e -> deleteSelectedPurchase());

        JPanel bottomPanel = new JPanel(new BorderLayout());
        bottomPanel.add(totalLabel, BorderLayout.WEST);
        bottomPanel.add(deleteButton, BorderLayout.EAST);

        add(new JLabel("All Purchases:"), BorderLayout.NORTH);
        add(scrollPane, BorderLayout.CENTER);
        add(bottomPanel, BorderLayout.SOUTH);
    }

        private void loadPurchases() {
        purchaseModel.clear();
        double total = 0.0;

        try (BufferedReader reader = new BufferedReader(new FileReader("data/purchases.txt"))) {
            String line;
            while ((line = reader.readLine()) != null) {
                purchaseModel.addElement(line);
                String[] parts = line.split(",");
                if (parts.length >= 3) {
                    total += Double.parseDouble(parts[2]);
                }
            }
        } catch (IOException | NumberFormatException ex) {
            ex.printStackTrace();
        }

        totalLabel.setText(String.format("Total: $%.2f", total));
    }

    private void deleteSelectedPurchase() {
        int index = purchaseList.getSelectedIndex();
        if (index == -1) {
            JOptionPane.showMessageDialog(this, "Please select a purchase to delete.");
            return;
        }

        String toRemove = purchaseModel.getElementAt(index);
        int confirm = JOptionPane.showConfirmDialog(this, "Refund this purchase?\n" + toRemove, "Confirm", JOptionPane.YES_NO_OPTION);
        if (confirm != JOptionPane.YES_OPTION) return;

        List<String> remaining = new ArrayList<>();
        try (BufferedReader reader = new BufferedReader(new FileReader("data/purchases.txt"))) {
            String line;
            while ((line = reader.readLine()) != null) {
                if (!line.equals(toRemove)) {
                    remaining.add(line);
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
            return;
        }

        try (BufferedWriter writer = new BufferedWriter(new FileWriter("data/purchases.txt"))) {
            for (String line : remaining) {
                writer.write(line);
                writer.newLine();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        loadPurchases();
        JOptionPane.showMessageDialog(this, "Purchase removed and refunded.");
    }



    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
